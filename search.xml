<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用gulp自动化构建前端项目]]></title>
    <url>%2F2017%2F07%2F09%2F%E4%BD%BF%E7%94%A8gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[gulp简介：&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。 环境搭建：1.安装nodeJS1.gulp是基于nodejs，所以需要安装nodejs。2.自己去node官网下载nodejs安装。 2.npm工具说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）； 使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；1.name: node插件名称。例：npm install gulp-sass –save-dev； 2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用； 3.–save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）； 4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点； 3.安装gulp1.npm install gulp -g； 4.新建package.json文件1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件； 2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。 5.新建gulpfile.js文件1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件2.新建gulpfile.js文件示例12345678910111213141516171819202122232425//导入工具包 require('node_modules里对应模块')var gulp = require('gulp'); //本地安装gulp所用到的地方var sass = require('gulp-sass');var minifycss = require('gulp-minify-css');//压缩css插件var cleancss = require('gulp-clean-css');//压缩css插件 //定义一个sass任务（自定义任务名称）gulp.task('sass', function () &#123; gulp.src('./sass/**/*.scss') //该任务针对的文件 .pipe(sass()) //该任务调用的模块 .pipe(cleancss(&#123; advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] keepBreaks: true,//类型：Boolean 默认：false [是否保留换行] keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 &#125;)) .pipe(gulp.dest('./css')); //将会在css文件夹下生成index.css（复制文件目录及文件）&#125;); gulp.task('default',['sass']); //定义默认任务 //gulp.task(name[, deps], fn) 定义任务 name：任务名称 deps：依赖任务名称 fn：回调函数//gulp.src(globs[, options]) 执行任务处理的文件 globs：处理的文件路径(字符串或者字符串数组) //gulp.dest(path[, options]) 处理完后文件生成路径 6.运行gulp1.gulp [name]: gulpfile.js里面定义的模块的名称 例如:gulp sass。2.gulp default: 如果定义了默认任务gulp.task(‘default’,[‘sass’])可直接执行gulp命令。 &ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3伪类选择器nth-child和nth-of-type的区别]]></title>
    <url>%2F2017%2F06%2F10%2Fss3%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8nth-child%E5%92%8Cnth-of-type%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[使用误区之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。 1.用法效果相同的情况示例一：123456# HTML代码&lt;div class="main"&gt; &lt;p&gt;one&lt;/p&gt; &lt;p&gt;two&lt;/p&gt; &lt;p&gt;three&lt;/p&gt;&lt;/div&gt; 要实现的效果：将two变红 nth-child()的方式: 12# CSSp:nth-child(2)&#123;color:red;&#125; nth-of-type()的方式: 12# CSSp:nth-of-type(2)&#123;color:red;&#125; 效果： 在同辈元素都相同的情况下两个用法效果一样 2.用法相同效果不同的情况示例二：1234567# HTML代码&lt;div class="main"&gt; &lt;p&gt;one&lt;/p&gt; &lt;div&gt;div&lt;/div&gt; &lt;p&gt;two&lt;/p&gt; &lt;p&gt;three&lt;/p&gt;&lt;/div&gt; 要实现的效果：同样将two变红 先看nth-of-type()的方式: 12# CSSp:nth-of-type(2)&#123;color:red;&#125; 效果： 再来看nth-child()的方式: 12# CSSp:nth-child(2)&#123;color:red;&#125; 效果： 3.用法不同效果相同的情况示例三：1234567# HTML代码&lt;div class="main"&gt; &lt;p&gt;one&lt;/p&gt; &lt;div&gt;div&lt;/div&gt; &lt;p&gt;two&lt;/p&gt; &lt;p&gt;three&lt;/p&gt;&lt;/div&gt; 要实现的效果：同样将two变红 先看nth-of-type()的方式: 12# CSSp:nth-of-type(2)&#123;color:red;&#125; 再来看nth-child()的方式: 12# CSSp:nth-child(3)&#123;color:red;&#125; 效果： 用法总结从以上三个示例可以看出： 1.在所有子元素都相同的情况下，两种用法效果相同； 2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>伪类选择器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery Dom元素Index()方法的使用]]></title>
    <url>%2F2017%2F06%2F10%2FJquery-Dom%E5%85%83%E7%B4%A0Index-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。 jquery获取元素索引值index()方法使用误区 由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释”//这里不知道为什么总是多了2，但其他页面又是正常的”，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。 jquery获取元素索引值index()方法作用用法一：$(select).index(); 示例一： 123456# html代码:&lt;div class="main"&gt; &lt;div class="box"&gt;Milk&lt;/div&gt; &lt;div class="box"&gt;Tea&lt;/div&gt; &lt;div class="box"&gt;Coffee&lt;/div&gt; &lt;/div&gt; 1234# js代码：$(".box").on("click",function()&#123; $(this).index();//结果：如果点击的Milk则返回 0&#125;); 这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二 示例二： 1234567# html代码:&lt;div class="main"&gt; &lt;p&gt;Soda&lt;/p&gt; &lt;div class="box"&gt;Milk&lt;/div&gt; &lt;div class="box"&gt;Tea&lt;/div&gt; &lt;div class="box"&gt;Coffee&lt;/div&gt; &lt;/div&gt; 1234# js代码：$(".box").on("click",function()&#123; $(this).index();//结果：如果点击的Milk则返回 1&#125;); 从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置 用法二：$(select1).index(select2); 示例： 12345678# html代码:&lt;p class="box"&gt;Tea&lt;/p&gt;&lt;div class="main"&gt; &lt;p&gt;Soda&lt;/p&gt; &lt;div class="box"&gt;Milk&lt;/div&gt; &lt;div class="box" id="box2"&gt;Tea&lt;/div&gt; &lt;div class="box"&gt;Coffee&lt;/div&gt;&lt;/div&gt; 12# js代码:$(".box").index($("#box2"));//结果: 2 通过这个示例可以看出$(select1).index(select2)的用法是选择器select2相对于选择器select1的位置索引，跟同辈元素和其父辈元素都无关。 总结虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Cmd Markdown 编辑阅读器]]></title>
    <url>%2F2017%2F06%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>